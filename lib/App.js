// Generated by CoffeeScript 1.10.0
(function() {
  var ActionController, FeedbackController, FrameController, GestureController, Leap, YAML, app, defaultProfile, express, fs, io, loadProfile, numUsers, port, robot, server;

  Leap = require('leapjs');

  robot = require('robotjs');

  YAML = require('yamljs');

  fs = require('fs');

  express = require('express');

  app = express();

  server = require('http').createServer(app);

  io = require('socket.io')(server);

  port = process.env.PORT || 3000;

  server.listen(port, function() {
    console.log('Server listening at port %d', port);
  });

  app.use(express["static"](__dirname + '/../static'));

  numUsers = 0;

  setInterval(function() {
    console.log("Foo");
    return io.emit('new message', {
      message: "Howling!",
      username: "Legion"
    });
  }, 2000);

  io.on('connection', function(socket) {
    console.log("A user connected");
    socket.on('new message', function(data) {
      socket.broadcast.emit('new message', {
        username: socket.username,
        message: data
      });
    });
    return socket.on('disconnect', function() {
      return console.log('user disconnected');
    });
  });

  FeedbackController = require('./FeedbackController');

  ActionController = require('./ActionController');

  GestureController = require('./GestureController');

  FrameController = require('./FrameController');

  defaultProfile = 'etc/config.yml';

  loadProfile = function(profile) {
    var actionHero, config, consume, feedback, frameController, leapController, translator;
    console.log("Load profile " + profile);
    config = YAML.parse(fs.readFileSync(profile, 'utf8'));
    console.log("loaded config: ", config);
    feedback = void 0;
    actionHero = void 0;
    translator = void 0;
    frameController = void 0;
    console.log("Load profile with Socket.IO: ", io);
    feedback = new FeedbackController(io);
    actionHero = new ActionController(config, feedback);
    translator = new GestureController(config, feedback, actionHero);
    frameController = new FrameController(config, translator);
    leapController = new Leap.Controller({
      inBrowser: false,
      enableGestures: true,
      frameEventName: 'deviceFrame',
      background: true,
      loopWhileDisconnected: false
    });
    console.log("Connecting Leap Controller");
    leapController.connect();
    console.log("Leap Controller connected");
    consume = function() {
      var frame;
      frame = leapController.frame();
      if (frame === null) {
        return;
      }
      return frameController.processFrame(frame);
    };
    setInterval(consume, config.interval);
    return "Foo..";
  };

  loadProfile(defaultProfile);

}).call(this);
